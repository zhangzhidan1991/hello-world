git fetch origin develop:feature/xxxx --把远程仓库上的develop拉到本地，命名为feature/xxxx，初创分支用一次

git checkout develop      --切换到主干
git checkout feature/xxxx  --切换分支
git checkout  filename   --还原掉对某文件所做的修改


你的代码是要合进主干或者需要打分支包才有需要提交到远程仓库，在合进主干前需要rebase
git pull origin develop --rebase  --推送到远端之前先拉一次最新的主干代码到当前分支
git push origin feature/xxxx   --推送当前的分支到远端


在主开发分支操作
git pull
git chekcout -b bugfix/zhz_xxx  //新建修复BUG分支
git chekcout -b feature/zhz_xxx  //新建开发分支

git status          --查看所做的改动文件列表(add 之前先运行这个命令)
git add dirname or filename --添加改动的文件到暂存区 
git commit -m "注释"   --提交改动的文件到本地仓库

git fetch  --保证本地的develop最新
git rebase origin/develop  --把develop分支合到当前分支
git push origin bugfix/zhz_xxx

git pull origin xx --把远端的代码拉过来

 git pull --rebase origin 分支名   --把某个分支拉过来
 
git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一
种情况，为了fix 一个紧急的bug,  先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。
基础命令：
$git stash
$do some work
$git stash pop

删除commit记录方法(删除push失败的记录)
使用git log命令查看commit的历史记录及其对应的commit_id
git reset --hard <commit_id> 
