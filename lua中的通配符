
%用作特殊字符的转义字符，因此 '%.' 匹配点; '%%'匹配字符 `%′ .转义字符`%′不仅可以用来转义特殊字符，还可以用于所有的非字母的字符。
当对一个字符有疑问的时候，为安全起见请使用转义字符转义他


.(点): 与任何字符配对
%a: 与任何字母配对
%c: 与任何控制符配对(例如\n)
%d: 与任何数字配对
%l: 与任何小写字母配对
%p: 与任何标点(punctuation)配对
%s: 与空白字符配对
%u: 与任何大写字母配对
%w: 与任何字母/数字配对
%x: 与任何十六进制数配对
%z: 与任何代表0的字符配对（ascii码是0的字符）
上面字符类的大写形式表示小写所代表的集合的补集。例如, '%A'非字母的字符

'%b'用来匹配对称的字符，常写为 '%bxy',x和y是任意两个不同的字符；x作为匹配的开始,y作为匹配的结束。比如'%b()'匹配以`(′开始， 以 `)′结束的字符串: 
 print(string.gsub("a (enclosed (in) parentheses) line", "%b()", ""))
    打印结果：a   line

[数个字符类]: 与任何[]中包含的字符类配对. 例如[%w_]与任何字母/数字, 或下划线符号(_)配对
[^数个字符类]: 与任何不包含在[]中的字符类配对. 例如[^%s]与任何非空白字符配对

+      匹配前一字符1次或多次，匹配一个或多个字符，总是进行最长的匹配。
*      匹配前一字符0次或多次，与 '+' 类似，但是他匹配一个字符0次或多次出现
-      匹配前一字符0次或多次，进行的是最短匹配
?      匹配前一字符0次或1次，匹配一个字符0次或1次
元字符+和*是贪婪的，总是进行最长的匹配，而-则是吝啬的，总是进行最短匹配，注意元字符-可以匹配0次

Lua的字符类依赖于本地环境，所以'[a-z]'可能与'%l'表示的字符集不同。在一般情况下，后者包括`ç´ 和 `ã´，而前者没有

元字符[]（实现自定义字符集）:
如[%a%d]就是与字母和数字配对，我们还可以使用’-‘符号来指定一个范围，如[0-7]表示[01234567],[a-z]表示小写字母，通过字符集,还可以定义其他复杂的通配符。
