
1 行为树的概述 
  将逻辑抽象成节点，并以树形结构将它们关联起来的一种设计范式。本质上是一颗逻辑树，常用于AI设计，当然也可以用在其他的各种逻辑开发场合
  
2 行为树的原理
  子节点在运行后向父节点反馈结果，父节点根据该结果来决定逻辑的执行路径，通过不同的节点组合可以实现各种逻辑表达。
  
3  节点的类型
    a 组合节点
      该类型的节点具有若干子节点，常见的组合节点有：序列节点，选择节点
       序列节点：正如它的名字所说，序列节点会依次（通常是从左到右）访问子节点。每个子节点成功之后便轮到下一个，直到最后。如果
                所有子节点都 Success，则向序列节点返回 Success；其间任何一个子节点返回 Failure，就会立即向序列节点返回 Failure 的
                结果，可以理解为逻辑“与门”。
                (访问逻辑是：若子节点运行后返回Failure或者正在Running，则终止后面子节点的访问，若子节点运行后返回Sucess，则继续访问后面的子节点)
                
       选择节点：选择节点会在任何一个子节点返回 Success 时就返回 Success 并且不再继续运行后续的子节点。相应的，当所有子节点都 Failure 时，选择
                节点才会返回 Failure。选择节点其实可以被理解为一个“或门”。
                （访问逻辑是：若子节点运行后返回Sucess或者Running，则终止后面子节点的访问，若子节点运行后返回Failure，则继续访问后面的子节点）
                如何从子节点中选择一个来执行呢？这就引入了另一个概念，我们称之为前提，前提就提供了“选择”的依据，它包含了进入，或者说选择这个节点的
                条件，当我们用到选择节点的时候，它就是去依次测试每一个子节点的前提，如果满足，则选择此节点
        
    b 修饰节点
      该类型的节点只有一个子节点，顾名思义，修饰节点是用来修饰其子节点的，一个比较常见的修饰节点的例子是 Inverter（逆变节点），它
      可以将子节点的结果倒转，比如子节点返回了 Failure，则这个修饰节点会向上返回 Success
      
    c 叶节点
      该类型的节点包含了最终的逻辑实现，是真正的功能实现单元，常见的叶节点有：条件节点，动作节点


 参考链接:
 1 http://www.aisharing.com/archives/90
