1 lua GC的工作原理：
  lua通过步进式垃圾收集方法的方法来实现内存管理，不选择引用计数的原因是引用计数带来的额外开销太大，尤其是即使一段程序
  完全不分配内存，你也需要承担这额外开销
  
  详情请见云风的博客：https://blog.codingnow.com/2018/10/lua_gc.html
  
  
2 lua与C++的交互：
  要理解Lua和C++交互，首先要理解Lua堆栈。简单来说，Lua和C/C++语言通信的主要方法是一个无处不在的虚拟栈。栈的特点是先进后出。
  在Lua中，Lua堆栈就是一个struct，堆栈索引的方式可是是正数也可以是负数，区别是：正数索引1永远表示栈底（该值从栈底向栈顶递增,如1，2...)
  负数索引-1永远表示栈顶（该值从栈顶向栈底递减，如-1，-2...）
  
  Lua库没有定义任何全局变量。它所有的状态保存在动态结构lua_State中，而且指向这个结构的指针作为所有Lua函数的一个参数
   
  常用的函数介绍：
  //////////////////////////////////////////////////////
   lua_gettop(lua_State *L)：用于返回栈中元素的个数，同时也是栈顶元素的索引，因为栈底是1，所以栈中有多少个元素，栈顶索引就是多少
   
   lua_settop(lua_State *L , int index)：用于把堆栈的栈顶索引设置为指定的数值，比如说，一个栈原来有8个元素，调用函数设置index为7，就是
   把堆栈的元素数设置为7，也就是删掉一个元素，而且是栈顶元素；这个是用的正数，也就是相对于栈底元素设置的；如果是相对于栈顶元素，则要求用负值
   也就是说如果设置索引为-2（index = -2），也相当于删除掉栈顶元素

   lua_pushvalue (lua_State *L, int index)：将栈中索引index对应的元素拷贝一份，压到栈顶
   
   lua_remove(lua_State *L, int index)：将栈中索引index对应的元素移除，该索引之上的元素将移动以填补空缺
   
   lua_insert(lua_State *L, int index)：弹出栈顶元素，并插入索引index位置  
   
   lua_replace(lua_State* L, int index)：将栈顶元素压入索引index对应的位置而不移动任何元素，同时弹出栈顶元素（因此指定位置的元素的值被替换）
   
   lua_gettable (lua_State *L, int index)：将t[k]值压入栈顶，这里的t是指有效索引index指向的值，k是指栈顶的值(会被弹出栈)
   
   lua_getglobal(lua_State *L, const char *name)：把全局的name的值压到栈顶
   
   lua_getfield (lua_State *L, int index, const char *k)：把t[k]值压入栈顶，这里的t是指有效索引index指向的值
   
   lua_setfield (lua_State *L, int index, const char *k)：等价于t[k] = v，这里的t是指有效索引index指向的值，V表示栈顶值(会被弹出栈)
   
   lua_is***(lua_State *L,int index)：检查变量是不是某个类型，index指示变量的顺序，栈顶为-1
  
   lua_to***(lua_State *L,int index)：获取栈中的变量，然后转换为某个指定的类型，并返回
  
   lua_close(lua_State *L)：销毁所有在指定的栈上的所有对象，同时释放所有该State使用的动态分配的空间。
   
   其他接口请参见官方文档：http://pgl.yoyo.org/luai/i/3.7+Functions+and+Types
   /////////////////////////////////////////////////
   
  CCLuaEngine* pEngine = CCLuaEngine::defaultEngine();
  CCLuaStack *pStack=pEngine->getLuaStack();
  pStack即为该堆栈,存入栈的数据类型包括数值, 字符串, 指针, talbe, 闭包等
  
  lua_State保存了整个Lua解释器的状态，每一个运行的脚本文件都在一个动态分配的叫做lua_State的数据结构中运行
  lua_State *L = pStack->getLuaState();
  
  详情请见博客：https://www.cnblogs.com/sevenyuan/p/4511808.html
  
  3 lua的require小结：
    加载过程：查找package.loaded 确认目标模块是否加载过，没加载过，则通过package.loaders 获取loader（加载器）通过loader去加载目标模块
    
    “ . ” 在require时会被替换为文件系统的分隔符，比如/，所以脚本所在的文件夹命名不能包含”.”
    
    package.loaders：是一个控制require如何加载模块的表，表内的值是一个搜索函数，调用require时，会升序地调用所有搜索函数；
